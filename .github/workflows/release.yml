name: release

on: 
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  linux:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux_2_28_x86_64
    strategy:
      matrix:
        python-version: [ 311, 312 ]
    steps:
      - uses: actions/checkout@v2
      - name: Set python version
        run: |
          echo "/opt/python/cp${{ matrix.python-version }}-cp${{ matrix.python-version }}/bin" >> $GITHUB_PATH

      - uses: dtolnay/rust-toolchain@1.72.0

      - name: Install tools
        run: |
          pip install poetry
          cargo install just

      - name: Build wheel
        env: 
          RUSTFLAGS: "-C link-arg=-s"
        run: |
          just bootstrap-python
          just build-wheel
          ls python/dist

      - name: Persist artifacts
        uses: actions/upload-artifact@v3
        with:
          name: "linux-${{ matrix.python-version }}"
          path: python/dist/*.whl
          
  win32-and-darwin:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - uses: dtolnay/rust-toolchain@1.72.0

      - name: Install tools
        run: |
          pip install poetry
          cargo install cargo-quickinstall
          cargo quickinstall just

      - name: Build wheel
        run: |
          just bootstrap-python
          just build-wheel
          ls python/dist

      - name: Persist artifacts
        uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.os }}-${{ matrix.python-version }}"
          path: python/dist/*.whl

  upload:
    runs-on: ubuntu-latest
    needs: [win32-and-darwin, linux]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Setup environment
        run: |
            tree .
            echo "/home/runner/.local/bin" >> $GITHUB_PATH

      - name: Install Twine
        run: pip install twine

      - name: Upload to PyPI site
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          for file in $(ls **/*.whl)
          do
            twine upload --non-interactive -u __token__ -p $PYPI_TOKEN $file || continue
          done
